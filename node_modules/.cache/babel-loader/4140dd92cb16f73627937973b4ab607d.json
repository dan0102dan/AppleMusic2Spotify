{"ast":null,"code":"var _jsxFileName = \"/Users/daniildavydov/Downloads/applemusic2spotify/src/components/transfer-playlist/TransferPlaylistStep3.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Icon, Button, Tag, Modal, List, Avatar, Switch, Popconfirm, Popover, Form, Input } from 'antd';\nimport { each } from 'lodash';\nimport { formatSeconds } from '../../services/UtilsService';\nimport AppleMusicPlaylist from '../../services/AppleMusicPlaylist';\nconst FormItem = Form.Item;\n\nclass TransferPlaylistStep3 extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      settingsItem: null,\n      settingsVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.playlist.onChange(() => {\n      this.forceUpdate();\n    });\n  }\n\n  buttons(placement) {\n    let nextStepDisabled = true;\n    const {\n      playlist\n    } = this.props;\n    const {\n      spotifyStatus\n    } = playlist;\n\n    for (let index = 0; playlist.playlist.length > index; index++) {\n      if (playlist.playlist[index].spotifyStatus === 'withResult') {\n        nextStepDisabled = false;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '16px 0',\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Popover, {\n      trigger: \"click\",\n      placement: placement === 'top' ? 'bottomRight' : 'topRight',\n      content: this.settings(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: 'large',\n      style: {\n        marginRight: 7\n      },\n      icon: \"setting\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, \"Search Settings\")), /*#__PURE__*/React.createElement(Button, {\n      size: 'large',\n      icon: \"pause-circle\",\n      style: {\n        marginRight: 7\n      },\n      disabled: spotifyStatus !== 'searching',\n      onClick: this.pause.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \"Pause\"), /*#__PURE__*/React.createElement(Button, {\n      size: 'large',\n      icon: \"play-circle\",\n      style: {\n        marginRight: 7\n      },\n      disabled: spotifyStatus !== 'paused' && spotifyStatus !== null,\n      onClick: this.resume.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, \"Start/Resume\"), playlist.spotifyStatus !== 'searchComplete' && /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"The search is not complete. Are you sure you want to go to the next step?\",\n      onConfirm: this.nextStep.bind(this),\n      okText: \"Yes\",\n      placement: placement === 'top' ? 'bottomRight' : 'topRight',\n      cancelText: \"No\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      size: 'large',\n      disabled: nextStepDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Next Step\", /*#__PURE__*/React.createElement(Icon, {\n      type: \"arrow-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }))), playlist.spotifyStatus === 'searchComplete' && /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      size: 'large',\n      onClick: this.nextStep.bind(this),\n      disabled: nextStepDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Next Step\", /*#__PURE__*/React.createElement(Icon, {\n      type: \"arrow-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 20\n      }\n    })));\n  }\n\n  nextStep() {\n    this.props.nextStep();\n  }\n\n  pause() {\n    this.props.playlist.pauseSearch();\n  }\n\n  resume() {\n    this.props.playlist.startSearch();\n  }\n\n  trackLabel(track) {\n    const status = track.spotifyStatus;\n\n    switch (status) {\n      default:\n      case 'pending':\n        return /*#__PURE__*/React.createElement(Tag, {\n          color: \"#7f8c8d\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 16\n          }\n        }, \"Pending\");\n\n      case 'failed':\n        return /*#__PURE__*/React.createElement(Tag, {\n          color: \"#e74c3c\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 16\n          }\n        }, \"Failed\");\n\n      case 'searching':\n        return /*#__PURE__*/React.createElement(Tag, {\n          color: \"#8e44ad\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 16\n          }\n        }, \"Searching\");\n\n      case 'noResult':\n        return /*#__PURE__*/React.createElement(Tag, {\n          color: \"#f1c40f\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 16\n          }\n        }, \"No Result\");\n\n      case 'withResult':\n        return /*#__PURE__*/React.createElement(Tag, {\n          color: \"#27ae60\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 16\n          }\n        }, \"Found\");\n    }\n  }\n\n  statusColumn(text, row) {\n    const status = row.spotifyStatus;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 12\n      }\n    }, this.trackLabel(row), status === 'withResult' && /*#__PURE__*/React.createElement(Button, {\n      size: 'small',\n      onClick: () => {\n        this.setState({\n          settingsItem: row.index,\n          settingsVisible: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      type: \"setting\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 14\n      }\n    })));\n  }\n\n  settings() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/React.createElement(Form, {\n      style: {\n        width: 300\n      },\n      onSubmit: this.settingsFormSave.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormItem, {\n      label: \"Search Format\",\n      help: \"Placeholders: {name}, {artist}, {album}, {composer}, {discCount}, {discNumber}, {genre}, {trackCount}, {trackNumber} and {year}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('searchFormat', {\n      initialValue: this.props.playlist.settings.searchFormat,\n      rules: [{\n        required: true,\n        message: 'Please fill the field.'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Search Format\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      style: {\n        marginBottom: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      style: {\n        width: '100%'\n      },\n      htmlType: \"submit\",\n      icon: \"smile-o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, \"Done\")));\n  }\n\n  settingsFormSave(e) {\n    e.preventDefault();\n    const {\n      props\n    } = this;\n    props.form.validateFields((errors, values) => {\n      if (!errors) {\n        each(values, (value, key) => {\n          props.playlist.option(key, value);\n        });\n      }\n    });\n  }\n\n  songSettingsModal() {\n    const {\n      playlist\n    } = this.props;\n    const {\n      settingsItem\n    } = this.state;\n    let track,\n        data = [],\n        selectedTrack;\n\n    if (this.state.settingsItem !== null) {\n      track = playlist.playlist[settingsItem];\n      selectedTrack = playlist.playlist[settingsItem].spotifySelected;\n\n      for (let index = 0; track.spotifyResults.length > index; index++) {\n        let spotifyTrack = track.spotifyResults[index];\n        data.push({\n          index,\n          id: spotifyTrack.id,\n          name: spotifyTrack.name,\n          link: spotifyTrack.external_urls.spotify,\n          image: spotifyTrack.album.images[1].url,\n          duration: spotifyTrack.duration_ms / 1000,\n          trackNumber: spotifyTrack.track_number,\n          artistName: spotifyTrack.artists[0].name,\n          artistLink: spotifyTrack.artists[0].external_urls.spotify,\n          albumName: spotifyTrack.album.name,\n          albumLink: spotifyTrack.album.external_urls.spotify,\n          track: spotifyTrack\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      title: \"Song Settings\",\n      visible: this.state.settingsVisible,\n      footer: null,\n      onCancel: () => {\n        this.setState({\n          settingsVisible: false\n        });\n        setTimeout(() => this.setState({\n          settingsItem: null\n        }), 200);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      itemLayout: \"horizontal\",\n      dataSource: data,\n      renderItem: item => {\n        const switchAction = /*#__PURE__*/React.createElement(Switch, {\n          checked: selectedTrack.id === item.id,\n          onChange: () => {\n            playlist.setSpotifySelected(settingsItem, item.id);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 32\n          }\n        });\n        return /*#__PURE__*/React.createElement(List.Item, {\n          actions: [switchAction],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 18\n          }\n        }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n          avatar: /*#__PURE__*/React.createElement(Avatar, {\n            src: item.image,\n            size: \"large\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 23\n            }\n          }),\n          description: /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 28\n            }\n          }, \"Album: \", /*#__PURE__*/React.createElement(\"a\", {\n            href: item.albumLink,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 38\n            }\n          }, item.albumName), \" - \", formatSeconds(item.duration)),\n          title: /*#__PURE__*/React.createElement(\"a\", {\n            target: \"_blank\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 22\n            }\n          }, item.artistName, \" - \", item.name, \" href=\", item.link, \" \"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 12\n      }\n    }, this.buttons('top'), /*#__PURE__*/React.createElement(Table, {\n      rowKey: \"index\",\n      columns: [{\n        title: 'Status',\n        dataIndex: 'status',\n        width: '13%',\n        render: this.statusColumn.bind(this)\n      }, {\n        title: 'Name',\n        dataIndex: 'name'\n      }, {\n        title: 'Artist',\n        dataIndex: 'artist'\n      }, {\n        title: 'Album',\n        dataIndex: 'album'\n      }],\n      dataSource: this.props.playlist.playlist,\n      pagination: false,\n      bordered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }\n    }), this.buttons('bottom'), this.songSettingsModal());\n  }\n\n}\n\nTransferPlaylistStep3.propTypes = {\n  playlist: PropTypes.instanceOf(AppleMusicPlaylist).isRequired,\n  nextStep: PropTypes.func.isRequired\n};\nexport default Form.create()(TransferPlaylistStep3);","map":{"version":3,"sources":["/Users/daniildavydov/Downloads/applemusic2spotify/src/components/transfer-playlist/TransferPlaylistStep3.js"],"names":["React","PropTypes","Table","Icon","Button","Tag","Modal","List","Avatar","Switch","Popconfirm","Popover","Form","Input","each","formatSeconds","AppleMusicPlaylist","FormItem","Item","TransferPlaylistStep3","Component","state","settingsItem","settingsVisible","componentDidMount","props","playlist","onChange","forceUpdate","buttons","placement","nextStepDisabled","spotifyStatus","index","length","margin","textAlign","settings","marginRight","pause","bind","resume","nextStep","pauseSearch","startSearch","trackLabel","track","status","statusColumn","text","row","setState","getFieldDecorator","form","width","settingsFormSave","initialValue","searchFormat","rules","required","message","marginBottom","e","preventDefault","validateFields","errors","values","value","key","option","songSettingsModal","data","selectedTrack","spotifySelected","spotifyResults","spotifyTrack","push","id","name","link","external_urls","spotify","image","album","images","url","duration","duration_ms","trackNumber","track_number","artistName","artists","artistLink","albumName","albumLink","setTimeout","item","switchAction","setSpotifySelected","render","title","dataIndex","propTypes","instanceOf","isRequired","func","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Table,\n  Icon,\n  Button,\n  Tag,\n  Modal,\n  List,\n  Avatar,\n  Switch,\n  Popconfirm,\n  Popover,\n  Form,\n  Input\n} from 'antd';\nimport { each } from 'lodash';\nimport { formatSeconds } from '../../services/UtilsService';\n\nimport AppleMusicPlaylist from '../../services/AppleMusicPlaylist';\n\nconst FormItem = Form.Item;\n\nclass TransferPlaylistStep3 extends React.Component {\n\n  state = {\n    settingsItem   : null,\n    settingsVisible: false\n  };\n\n  componentDidMount () {\n    this.props.playlist.onChange(() => {\n      this.forceUpdate();\n    });\n  }\n\n  buttons (placement) {\n    let nextStepDisabled = true;\n    const {playlist} = this.props;\n    const {spotifyStatus} = playlist;\n    for (let index = 0; playlist.playlist.length > index; index++) {\n      if (playlist.playlist[index].spotifyStatus === 'withResult') {\n        nextStepDisabled = false;\n      }\n    }\n    return <div style={{margin: '16px 0', textAlign: 'right'}}>\n      <Popover\n        trigger=\"click\"\n        placement={placement === 'top' ? 'bottomRight' : 'topRight'}\n        content={this.settings()}\n      >\n        <Button\n          size={'large'}\n          style={{marginRight: 7}}\n          icon='setting'\n        >\n          Search Settings\n        </Button>\n      </Popover>\n      <Button\n        size={'large'}\n        icon='pause-circle'\n        style={{marginRight: 7}}\n        disabled={spotifyStatus !== 'searching'}\n        onClick={this.pause.bind(this)}\n      >\n        Pause\n      </Button>\n      <Button\n        size={'large'}\n        icon='play-circle'\n        style={{marginRight: 7}}\n        disabled={spotifyStatus !== 'paused' && spotifyStatus !== null}\n        onClick={this.resume.bind(this)}\n      >\n        Start/Resume\n      </Button>\n\n      {\n        playlist.spotifyStatus !== 'searchComplete' &&\n        <Popconfirm\n          title=\"The search is not complete. Are you sure you want to go to the next step?\"\n          onConfirm={this.nextStep.bind(this)}\n          okText=\"Yes\"\n          placement={placement === 'top' ? 'bottomRight' : 'topRight'}\n          cancelText=\"No\">\n          <Button\n            type=\"primary\"\n            size={'large'}\n            disabled={nextStepDisabled}\n          >\n            Next Step\n            <Icon type=\"arrow-right\"/>\n          </Button>\n        </Popconfirm>\n      }\n      {\n        playlist.spotifyStatus === 'searchComplete' &&\n        <Button\n          type=\"primary\"\n          size={'large'}\n          onClick={this.nextStep.bind(this)}\n          disabled={nextStepDisabled}\n        >\n          Next Step<Icon type=\"arrow-right\"/>\n        </Button>\n      }\n\n    </div>;\n  }\n\n  nextStep () {\n    this.props.nextStep();\n  }\n\n  pause () {\n    this.props.playlist.pauseSearch();\n  }\n\n  resume () {\n    this.props.playlist.startSearch();\n  }\n\n  trackLabel (track) {\n    const status = track.spotifyStatus;\n    switch (status) {\n      default:\n      case 'pending':\n        return <Tag color=\"#7f8c8d\">Pending</Tag>;\n      case 'failed':\n        return <Tag color=\"#e74c3c\">Failed</Tag>;\n      case 'searching':\n        return <Tag color=\"#8e44ad\">Searching</Tag>;\n      case 'noResult':\n        return <Tag color=\"#f1c40f\">No Result</Tag>;\n      case 'withResult':\n        return <Tag color=\"#27ae60\">Found</Tag>;\n    }\n  }\n\n  statusColumn (text, row) {\n    const status = row.spotifyStatus;\n    return <div>\n      {this.trackLabel(row)}\n      {\n        status === 'withResult' &&\n        <Button\n          size={'small'}\n          onClick={() => {\n            this.setState({settingsItem: row.index, settingsVisible: true});\n          }}><Icon type=\"setting\"/></Button>}\n    </div>;\n  }\n\n  settings () {\n    const {getFieldDecorator} = this.props.form;\n    return (\n      <Form\n        style={{width: 300}}\n        onSubmit={this.settingsFormSave.bind(this)}\n      >\n        <FormItem\n          label='Search Format'\n          help=\"Placeholders: {name}, {artist}, {album}, {composer}, {discCount}, {discNumber}, {genre}, {trackCount}, {trackNumber} and {year}\"\n        >\n          {getFieldDecorator('searchFormat',\n            {\n              initialValue: this.props.playlist.settings.searchFormat,\n              rules       : [{required: true, message: 'Please fill the field.'}],\n            })(\n            <Input placeholder=\"Search Format\"/>\n          )}\n        </FormItem>\n        <FormItem style={{marginBottom: 0}}>\n          <Button\n            type=\"primary\"\n            style={{width: '100%'}}\n            htmlType=\"submit\"\n            icon='smile-o'\n          >\n            Done\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n\n  settingsFormSave (e) {\n    e.preventDefault();\n    const {props} = this;\n    props.form.validateFields((errors, values) => {\n      if (!errors) {\n        each(values, (value, key) => {\n          props.playlist.option(key, value);\n        });\n      }\n    });\n  }\n\n  songSettingsModal () {\n    const {playlist} = this.props;\n    const {settingsItem} = this.state;\n    let track, data = [], selectedTrack;\n    if (this.state.settingsItem !== null) {\n      track = playlist.playlist[settingsItem];\n      selectedTrack = playlist.playlist[settingsItem].spotifySelected;\n      for (let index = 0; track.spotifyResults.length > index; index++) {\n        let spotifyTrack = track.spotifyResults[index];\n        data.push({\n          index,\n          id         : spotifyTrack.id,\n          name       : spotifyTrack.name,\n          link       : spotifyTrack.external_urls.spotify,\n          image      : spotifyTrack.album.images[1].url,\n          duration   : spotifyTrack.duration_ms / 1000,\n          trackNumber: spotifyTrack.track_number,\n          artistName : spotifyTrack.artists[0].name,\n          artistLink : spotifyTrack.artists[0].external_urls.spotify,\n          albumName  : spotifyTrack.album.name,\n          albumLink  : spotifyTrack.album.external_urls.spotify,\n          track      : spotifyTrack\n        });\n      }\n    }\n    return <Modal\n      title=\"Song Settings\"\n      visible={this.state.settingsVisible}\n      footer={null}\n      onCancel={() => {\n        this.setState({settingsVisible: false});\n        setTimeout(() => this.setState({settingsItem: null}), 200);\n      }}\n    >\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={data}\n        renderItem={item => {\n          const switchAction = <Switch\n            checked={selectedTrack.id === item.id}\n            onChange={() => {\n              playlist.setSpotifySelected(settingsItem, item.id);\n            }}/>;\n          return <List.Item actions={[switchAction]}>\n            <List.Item.Meta\n              avatar={<Avatar src={item.image} size=\"large\"/>}\n              description={<p>Album: <a href={item.albumLink}>{item.albumName}</a> - {formatSeconds(item.duration)}</p>}\n              title={<a target=\"_blank\">{item.artistName} - {item.name} href={item.link} </a>}\n            />\n          </List.Item>;\n        }}\n      />\n    </Modal>;\n  }\n\n  render () {\n    return <div>\n      {this.buttons('top')}\n      <Table\n        rowKey=\"index\"\n        columns={[\n          {\n            title    : 'Status',\n            dataIndex: 'status',\n            width    : '13%',\n            render   : this.statusColumn.bind(this)\n          },\n          {\n            title    : 'Name',\n            dataIndex: 'name',\n          },\n          {\n            title    : 'Artist',\n            dataIndex: 'artist',\n          },\n          {\n            title    : 'Album',\n            dataIndex: 'album',\n          }\n        ]}\n        dataSource={this.props.playlist.playlist}\n        pagination={false}\n        bordered\n      />\n      {this.buttons('bottom')}\n      {this.songSettingsModal()}\n    </div>;\n  }\n}\n\nTransferPlaylistStep3.propTypes = {\n  playlist: PropTypes.instanceOf(AppleMusicPlaylist).isRequired,\n  nextStep: PropTypes.func.isRequired\n};\n\nexport default Form.create()(TransferPlaylistStep3);"]},"metadata":{},"sourceType":"module"}