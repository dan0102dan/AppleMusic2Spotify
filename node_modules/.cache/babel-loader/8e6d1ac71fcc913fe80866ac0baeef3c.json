{"ast":null,"code":"var _jsxFileName = \"/Users/daniildavydov/Downloads/applemusic2spotify/src/components/transfer-playlist/TransferPlaylistStep4.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { chunk } from 'lodash';\nimport { Button, Card, Dropdown, Menu, Form, Input, Modal, Checkbox, Table, Alert } from 'antd';\nimport { getPlaylists, createPlaylist, addTrackToPlaylist } from '../../services/ApiService';\nconst FormItem = Form.Item;\nconst {\n  TextArea\n} = Input;\n\nclass TransferPlaylistStep4 extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playlist: null,\n      userPlaylists: null,\n      fetchingPlaylists: false,\n      isCreatingPlaylist: false,\n      createPlaylistModalVisible: false,\n      isImporting: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.playlist.onChange(() => {\n      this.forceUpdate();\n    });\n  }\n\n  selectPlaylist() {\n    if (this.state.userPlaylists !== null) {\n      return;\n    }\n\n    this.setState({\n      fetchingPlaylists: true\n    });\n    getPlaylists().then(res => {\n      this.setState({\n        fetchingPlaylists: false,\n        userPlaylists: res.data\n      });\n    }).catch(() => {\n      alert('Couldn\\'t get playlists. Please try again.');\n    });\n  }\n\n  selectPlaylistsMenu() {\n    return /*#__PURE__*/React.createElement(Menu, {\n      onClick: event => {\n        this.setState({\n          playlist: event.item.props.playlist\n        }, () => {\n          this.importSong();\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    }, this.state.userPlaylists === null ? null : this.state.userPlaylists.items.map((playlist, index) => {\n      return /*#__PURE__*/React.createElement(Menu.Item, {\n        key: index,\n        playlist: playlist,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 16\n        }\n      }, playlist.name);\n    }));\n  }\n\n  createPlaylistModal() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/React.createElement(Modal, {\n      title: \"Create Playlist\",\n      closable: false,\n      maskClosable: true,\n      visible: this.state.createPlaylistModalVisible,\n      onCancel: () => this.setState({\n        createPlaylistModalVisible: false\n      }),\n      footer: [/*#__PURE__*/React.createElement(Button, {\n        key: \"back\",\n        onClick: () => this.setState({\n          createPlaylistModalVisible: false\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n        key: \"submit\",\n        type: \"primary\",\n        loading: this.state.isCreatingPlaylist,\n        onClick: this.createPlaylist.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, \"Create\")],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.createPlaylist.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('name', {\n      validateTrigger: 'onBlur',\n      rules: [{\n        required: true,\n        message: 'Please enter a name'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Playlist Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('description', {\n      initialValue: ''\n    })( /*#__PURE__*/React.createElement(TextArea, {\n      autosize: true,\n      placeholder: \"Playlist Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('isPublic', {\n      initialValue: true\n    })( /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"This is a public playlist!\")))));\n  }\n\n  createPlaylist(e) {\n    if (e) e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.setState({\n          isCreatingPlaylist: true\n        });\n        createPlaylist(this.props.user.id, values.name, values.description, values.isPublic).then(res => {\n          this.setState({\n            isCreatingPlaylist: false,\n            createPlaylistModalVisible: false,\n            playlist: res.data\n          });\n          this.importSong();\n        }).catch(() => {\n          alert(`Couldn't create the playlist. Please refresh the page.`);\n        });\n      }\n    });\n  }\n\n  async importSong() {\n    this.props.playlist.setSpotifyStatus('importing');\n    const songs = this.props.playlist.getPlaylist('withResult');\n    const chunks = chunk(songs, 100);\n\n    for (let index = 0; chunks.length > index; index++) {\n      let songsUri = [];\n\n      for (let songIndex = 0; chunks[index].length > songIndex; songIndex++) {\n        songsUri.push(chunks[index][songIndex].spotifySelected.uri);\n      }\n\n      await addTrackToPlaylist(this.props.user.id, this.state.playlist.id, songsUri);\n    }\n\n    this.props.playlist.setSpotifyStatus('done');\n  }\n\n  importTable() {\n    return /*#__PURE__*/React.createElement(Table, {\n      loading: this.state.isImporting,\n      bordered: true,\n      rowKey: \"index\",\n      columns: [{\n        title: 'Name',\n        dataIndex: 'name'\n      }, {\n        title: 'Artist',\n        dataIndex: 'artist'\n      }, {\n        title: 'Album',\n        dataIndex: 'album'\n      }],\n      dataSource: this.props.playlist.getPlaylist('withResult'),\n      pagination: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    const {\n      playlist\n    } = this.props;\n\n    if (playlist.spotifyStatus === 'done') {\n      return /*#__PURE__*/React.createElement(Alert, {\n        message: \"All Songs Imported\",\n        description: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 22\n          }\n        }, \"All songs imported. \", /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 31\n          }\n        }), /*#__PURE__*/React.createElement(\"a\", {\n          href: this.state.playlist.external_urls.spotify,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }\n        }, this.state.playlist.name)),\n        type: \"success\",\n        showIcon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 12\n      }\n    }, this.state.playlist === null && /*#__PURE__*/React.createElement(Card, {\n      style: {\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        width: 650,\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      size: \"large\",\n      onClick: () => this.setState({\n        createPlaylistModalVisible: true\n      }),\n      style: {\n        marginRight: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, \"Create a New Playlist\"), /*#__PURE__*/React.createElement(Dropdown, {\n      trigger: ['click'],\n      overlay: this.selectPlaylistsMenu(),\n      placement: \"bottomLeft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      size: \"large\",\n      onClick: this.selectPlaylist.bind(this),\n      loading: this.state.fetchingPlaylists,\n      style: {\n        marginLeft: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, \"Import to Existing Playlist\"))), this.state.playlist !== null && this.importTable(), this.createPlaylistModal());\n  }\n\n}\n\nTransferPlaylistStep4.propTypes = {\n  user: PropTypes.object.isRequired,\n  playlist: PropTypes.object.isRequired\n};\nexport default Form.create()(TransferPlaylistStep4);","map":{"version":3,"sources":["/Users/daniildavydov/Downloads/applemusic2spotify/src/components/transfer-playlist/TransferPlaylistStep4.js"],"names":["React","PropTypes","chunk","Button","Card","Dropdown","Menu","Form","Input","Modal","Checkbox","Table","Alert","getPlaylists","createPlaylist","addTrackToPlaylist","FormItem","Item","TextArea","TransferPlaylistStep4","Component","state","playlist","userPlaylists","fetchingPlaylists","isCreatingPlaylist","createPlaylistModalVisible","isImporting","componentDidMount","props","onChange","forceUpdate","selectPlaylist","setState","then","res","data","catch","alert","selectPlaylistsMenu","event","item","importSong","items","map","index","name","createPlaylistModal","getFieldDecorator","form","bind","validateTrigger","rules","required","message","initialValue","e","preventDefault","validateFields","err","values","user","id","description","isPublic","setSpotifyStatus","songs","getPlaylist","chunks","length","songsUri","songIndex","push","spotifySelected","uri","importTable","title","dataIndex","render","spotifyStatus","external_urls","spotify","marginRight","marginLeft","width","textAlign","propTypes","object","isRequired","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chunk } from 'lodash';\nimport { Button, Card, Dropdown, Menu, Form, Input, Modal, Checkbox, Table, Alert } from 'antd';\n\nimport { getPlaylists, createPlaylist, addTrackToPlaylist } from '../../services/ApiService';\n\nconst FormItem = Form.Item;\nconst {TextArea} = Input;\n\nclass TransferPlaylistStep4 extends React.Component {\n\n  state = {\n    playlist                  : null,\n    userPlaylists             : null,\n    fetchingPlaylists         : false,\n    isCreatingPlaylist        : false,\n    createPlaylistModalVisible: false,\n    isImporting               : false\n  };\n\n  componentDidMount () {\n    this.props.playlist.onChange(() => {\n      this.forceUpdate();\n    });\n  }\n\n  selectPlaylist () {\n    if (this.state.userPlaylists !== null) {\n      return;\n    }\n    this.setState({fetchingPlaylists: true});\n    getPlaylists()\n      .then((res) => {\n        this.setState({\n          fetchingPlaylists: false,\n          userPlaylists    : res.data\n        });\n      })\n      .catch(() => {\n        alert('Couldn\\'t get playlists. Please try again.');\n      });\n  }\n\n  selectPlaylistsMenu () {\n    return <Menu onClick={(event) => {\n      this.setState({\n        playlist: event.item.props.playlist\n      }, () => {\n        this.importSong();\n      });\n    }}>\n      {this.state.userPlaylists === null ? null : this.state.userPlaylists.items.map((playlist, index) => {\n        return <Menu.Item key={index} playlist={playlist}>\n          {playlist.name}\n        </Menu.Item>;\n      })}\n    </Menu>;\n  }\n\n  createPlaylistModal () {\n    const {getFieldDecorator} = this.props.form;\n    return <Modal\n      title=\"Create Playlist\"\n      closable={false}\n      maskClosable={true}\n      visible={this.state.createPlaylistModalVisible}\n      onCancel={() => this.setState({createPlaylistModalVisible: false})}\n      footer={[\n        <Button key=\"back\" onClick={() => this.setState({createPlaylistModalVisible: false})}>Cancel</Button>,\n        <Button key=\"submit\" type=\"primary\" loading={this.state.isCreatingPlaylist} onClick={this.createPlaylist.bind(this)}>\n          Create\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={this.createPlaylist.bind(this)}>\n        <FormItem>\n          {getFieldDecorator('name', {\n            validateTrigger: 'onBlur',\n            rules          : [\n              {\n                required: true,\n                message : 'Please enter a name'\n              }\n            ]\n          })(\n            <Input placeholder=\"Playlist Name\"/>\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('description', {\n            initialValue: ''\n          })(\n            <TextArea autosize={true} placeholder=\"Playlist Description\"/>\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('isPublic', {\n            initialValue: true\n          })(\n            <Checkbox defaultChecked={true}>This is a public playlist!</Checkbox>\n          )}\n        </FormItem>\n      </Form>\n    </Modal>;\n  }\n\n  createPlaylist (e) {\n    if (e)\n      e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.setState({\n          isCreatingPlaylist: true\n        });\n        createPlaylist(\n          this.props.user.id,\n          values.name,\n          values.description,\n          values.isPublic\n        )\n          .then((res) => {\n            this.setState({\n              isCreatingPlaylist        : false,\n              createPlaylistModalVisible: false,\n              playlist                  : res.data\n            });\n            this.importSong();\n          })\n          .catch(() => {\n            alert(`Couldn't create the playlist. Please refresh the page.`);\n          });\n      }\n    });\n\n  }\n\n  async importSong () {\n    this.props.playlist.setSpotifyStatus('importing');\n    const songs = this.props.playlist.getPlaylist('withResult');\n    const chunks = chunk(songs, 100);\n    for (let index = 0; chunks.length > index; index++) {\n      let songsUri = [];\n      for (let songIndex = 0; chunks[index].length > songIndex; songIndex++) {\n        songsUri.push(chunks[index][songIndex].spotifySelected.uri);\n      }\n      await addTrackToPlaylist(this.props.user.id, this.state.playlist.id, songsUri);\n    }\n    this.props.playlist.setSpotifyStatus('done');\n  }\n\n  importTable () {\n    return (\n      <Table\n        loading={this.state.isImporting}\n        bordered={true}\n        rowKey=\"index\"\n        columns={[\n          {\n            title    : 'Name',\n            dataIndex: 'name',\n          },\n          {\n            title    : 'Artist',\n            dataIndex: 'artist',\n          },\n          {\n            title    : 'Album',\n            dataIndex: 'album',\n          }\n        ]}\n        dataSource={this.props.playlist.getPlaylist('withResult')}\n        pagination={false}/>\n    );\n  }\n\n  render () {\n    const {playlist} = this.props;\n    if (playlist.spotifyStatus === 'done') {\n      return <Alert\n        message=\"All Songs Imported\"\n        description={<div>\n          All songs imported. <br/>\n          <a href={this.state.playlist.external_urls.spotify}>{this.state.playlist.name}</a>\n        </div>}\n        type=\"success\"\n        showIcon\n      />;\n    }\n    return <div>\n      {this.state.playlist === null &&\n      <Card style={{marginRight: 'auto', marginLeft: 'auto', width: 650, textAlign: 'center'}}>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={() => this.setState({createPlaylistModalVisible: true})}\n          style={{marginRight: 5}}>\n          Create a New Playlist\n        </Button>\n        <Dropdown trigger={['click']} overlay={this.selectPlaylistsMenu()} placement=\"bottomLeft\">\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            onClick={this.selectPlaylist.bind(this)}\n            loading={this.state.fetchingPlaylists}\n            style={{marginLeft: 5}}>\n            Import to Existing Playlist\n          </Button>\n        </Dropdown>\n      </Card>}\n      {this.state.playlist !== null && this.importTable()}\n\n      {this.createPlaylistModal()}\n    </div>;\n  }\n}\n\nTransferPlaylistStep4.propTypes = {\n  user    : PropTypes.object.isRequired,\n  playlist: PropTypes.object.isRequired\n};\n\nexport default Form.create()(TransferPlaylistStep4);"]},"metadata":{},"sourceType":"module"}